{"version":3,"sources":["api/users.ts","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","api/todos.ts","App.tsx","index.tsx"],"names":["id","name","username","email","TodoInfo","title","completed","userId","user","usersFromServer","find","u","className","href","TodoList","todos","map","todo","App","useState","setTitle","selectedUser","setSelectedUser","titleError","setTitleError","userError","setUserError","todosFromServer","setTodos","getNewTodoId","arr","allId","item","Math","max","onSubmit","event","preventDefault","action","method","htmlFor","value","onChange","target","type","placeholder","disabled","ReactDOM","render","document","getElementById"],"mappings":"sMAAe,G,MAAA,CACb,CACEA,GAAI,EACJC,KAAM,gBACNC,SAAU,OACVC,MAAO,qBAET,CACEH,GAAI,EACJC,KAAM,eACNC,SAAU,YACVC,MAAO,qBAET,CACEH,GAAI,EACJC,KAAM,mBACNC,SAAU,WACVC,MAAO,sBAET,CACEH,GAAI,EACJC,KAAM,mBACNC,SAAU,WACVC,MAAO,6BAET,CACEH,GAAI,EACJC,KAAM,mBACNC,SAAU,SACVC,MAAO,4BAET,CACEH,GAAI,EACJC,KAAM,uBACNC,SAAU,mBACVC,MAAO,2BAET,CACEH,GAAI,EACJC,KAAM,kBACNC,SAAU,eACVC,MAAO,0BAET,CACEH,GAAI,EACJC,KAAM,2BACNC,SAAU,gBACVC,MAAO,wBAET,CACEH,GAAI,EACJC,KAAM,kBACNC,SAAU,WACVC,MAAO,2BAET,CACEH,GAAI,GACJC,KAAM,qBACNC,SAAU,iBACVC,MAAO,4B,OChDEC,EAA4B,SAAC,GAEnC,IADLC,EACI,EADJA,MAAOC,EACH,EADGA,UAAWN,EACd,EADcA,GAAIO,EAClB,EADkBA,OAEhBC,EAAOC,EAAgBC,MAAK,SAAAC,GAAC,OAAIA,EAAEX,KAAOO,KAEhD,OACE,0BAAS,UAASP,EAAIY,UAAS,mBAAcN,GAAa,uBAA1D,UACE,oBAAIM,UAAU,kBAAd,SACGP,IAGH,mBAAGO,UAAU,WAAWC,KAAI,wBAAYL,QAAZ,IAAYA,OAAZ,EAAYA,EAAML,OAA9C,gBACGK,QADH,IACGA,OADH,EACGA,EAAMP,WCdFa,EAA4B,SAAC,GAAe,IAAbC,EAAY,EAAZA,MAC1C,OACE,yBAASH,UAAU,WAAnB,SACGG,EAAMC,KAAI,SAAAC,GAAI,OACb,cAAC,EAAD,CAEEjB,GAAIiB,EAAKjB,GACTK,MAAOY,EAAKZ,MACZC,UAAWW,EAAKX,UAChBC,OAAQU,EAAKV,QAJRU,EAAKjB,UCdL,GACb,CACEA,GAAI,EACJK,MAAO,qBACPC,WAAW,EACXC,OAAQ,GAEV,CACEP,GAAI,GACJK,MAAO,kBACPC,WAAW,EACXC,OAAQ,GAEV,CACEP,GAAI,EACJK,MAAO,qCACPC,WAAW,EACXC,OAAQ,ICRCW,EAAgB,WAC3B,MAA0BC,mBAAS,IAAnC,mBAAOd,EAAP,KAAce,EAAd,KACA,EAAwCD,mBAAS,GAAjD,mBAAOE,EAAP,KAAqBC,EAArB,KAEA,EAAoCH,oBAAS,GAA7C,mBAAOI,EAAP,KAAmBC,EAAnB,KACA,EAAkCL,oBAAS,GAA3C,mBAAOM,EAAP,KAAkBC,EAAlB,KAEA,EAA0BP,mBAASQ,GAAnC,mBAAOZ,EAAP,KAAca,EAAd,KAEA,SAASC,EAAaC,GACpB,IAAMC,EAAQD,EAAId,KAAI,SAAAgB,GAAI,OAAIA,EAAKhC,MAGnC,OAFeiC,KAAKC,IAAL,MAAAD,KAAI,YAAQF,IAEX,EA6BlB,OACE,sBAAKnB,UAAU,MAAf,UACE,+CAEA,uBACEuB,SA/BiB,SAACC,GACtBA,EAAMC,iBAEDhC,GACHmB,GAAc,GAGXH,GACHK,GAAa,GAGVrB,GAAUgB,IAIfO,EAAS,GAAD,mBAAKb,GAAL,CAAY,CAClBf,GAAI6B,EAAad,GACjBV,QACAC,WAAW,EACXC,OAAQc,MAGVD,EAAS,IACTE,EAAgB,KASZgB,OAAO,aACPC,OAAO,OAHT,UAKE,sBAAK3B,UAAU,QAAf,UACE,uBAAO4B,QAAQ,QAAf,qBACA,uBACEC,MAAOpC,EACPqC,SAAU,SAAAN,GACRhB,EAASgB,EAAMO,OAAOF,OACtBjB,GAAc,IAEhBxB,GAAG,QACH4C,KAAK,OACL,UAAQ,aACRC,YAAY,kBAGbtB,GAAc,sBAAMX,UAAU,QAAhB,qCAGjB,sBAAKA,UAAU,QAAf,UACE,uBAAO4B,QAAQ,OAAf,oBAEA,yBACE,UAAQ,aACRxC,GAAG,OACHyC,MAAOpB,EACPqB,SAAU,SAACN,GACTd,GAAiBc,EAAMO,OAAOF,OAC9Bf,GAAa,IANjB,UASE,wBAAQe,MAAM,IAAIK,UAAQ,EAA1B,2BACCrC,EAAgBO,KAAI,SAAAR,GAAI,OACvB,wBAAsBiC,MAAOjC,EAAKR,GAAlC,SAAuCQ,EAAKP,MAA/BO,EAAKR,UAIrByB,GAAa,sBAAMb,UAAU,QAAhB,qCAGhB,wBAAQgC,KAAK,SAAS,UAAQ,eAA9B,oBAKF,cAAC,EAAD,CAAU7B,MAAOA,QCpGvBgC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.09634e97.chunk.js","sourcesContent":["export default [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n  },\n];\n","import React from 'react';\n\nimport usersFromServer from '../../api/users';\n\ntype Props = {\n  title: string,\n  completed: boolean,\n  id: number,\n  userId: number,\n};\n\nexport const TodoInfo: React.FC<Props> = ({\n  title, completed, id, userId,\n}) => {\n  const user = usersFromServer.find(u => u.id === userId);\n\n  return (\n    <article data-id={id} className={`TodoInfo ${completed && 'TodoInfo--completed'}`}>\n      <h2 className=\"TodoInfo__title\">\n        {title}\n      </h2>\n\n      <a className=\"UserInfo\" href={`mailto:${user?.email}`}>\n        {user?.name}\n      </a>\n    </article>\n  );\n};\n","import React from 'react';\nimport { TodoInfo } from '../TodoInfo';\n\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  todos: Todo[]\n};\n\nexport const TodoList: React.FC<Props> = ({ todos }) => {\n  return (\n    <section className=\"TodoList\">\n      {todos.map(todo => (\n        <TodoInfo\n          key={todo.id}\n          id={todo.id}\n          title={todo.title}\n          completed={todo.completed}\n          userId={todo.userId}\n        />\n      ))}\n    </section>\n  );\n};\n","export default [\n  {\n    id: 1,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 15,\n    title: 'some other todo',\n    completed: false,\n    userId: 1,\n  },\n  {\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n    userId: 4,\n  },\n];\n","import React, { FormEvent, useState } from 'react';\nimport './App.scss';\nimport { TodoList } from './components/TodoList';\n\nimport usersFromServer from './api/users';\nimport todosFromServer from './api/todos';\n\nimport { Todo } from './types/Todo';\n\nexport const App: React.FC = () => {\n  const [title, setTitle] = useState('');\n  const [selectedUser, setSelectedUser] = useState(0);\n\n  const [titleError, setTitleError] = useState(false);\n  const [userError, setUserError] = useState(false);\n\n  const [todos, setTodos] = useState(todosFromServer);\n\n  function getNewTodoId(arr: Todo[]) {\n    const allId = arr.map(item => item.id);\n    const maxNum = Math.max(...allId);\n\n    return maxNum + 1;\n  }\n\n  const handleOnSubmit = (event: FormEvent) => {\n    event.preventDefault();\n\n    if (!title) {\n      setTitleError(true);\n    }\n\n    if (!selectedUser) {\n      setUserError(true);\n    }\n\n    if (!title || !selectedUser) {\n      return;\n    }\n\n    setTodos([...todos, {\n      id: getNewTodoId(todos),\n      title,\n      completed: false,\n      userId: selectedUser,\n    }]);\n\n    setTitle('');\n    setSelectedUser(0);\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Add todo form</h1>\n\n      <form\n        onSubmit={handleOnSubmit}\n        action=\"/api/todos\"\n        method=\"POST\"\n      >\n        <div className=\"field\">\n          <label htmlFor=\"title\">Title: </label>\n          <input\n            value={title}\n            onChange={event => {\n              setTitle(event.target.value);\n              setTitleError(false);\n            }}\n            id=\"title\"\n            type=\"text\"\n            data-cy=\"titleInput\"\n            placeholder=\"Enter a title\"\n          />\n\n          {titleError && <span className=\"error\">Please enter a title</span>}\n        </div>\n\n        <div className=\"field\">\n          <label htmlFor=\"user\">User: </label>\n\n          <select\n            data-cy=\"userSelect\"\n            id=\"user\"\n            value={selectedUser}\n            onChange={(event) => {\n              setSelectedUser(+event.target.value);\n              setUserError(false);\n            }}\n          >\n            <option value=\"0\" disabled>Choose a user</option>\n            {usersFromServer.map(user => (\n              <option key={user.id} value={user.id}>{user.name}</option>\n            ))}\n          </select>\n\n          {userError && <span className=\"error\">Please choose a user</span>}\n        </div>\n\n        <button type=\"submit\" data-cy=\"submitButton\">\n          Add\n        </button>\n      </form>\n\n      <TodoList todos={todos} />\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}